#!/usr/bin/env node

/**
 * Simplified Production Database Setup
 * Uses root user to create database and tables directly
 */

const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

async function setupDatabaseSimple() {
    let connection;
    
    try {
        console.log('üöÄ Setting up JobScooter Database (Simplified)...\n');
        
        // Connect as root to the production database
        console.log('üîå Connecting to MySQL as root...');
        connection = await mysql.createConnection({
            host: process.env.DB_HOST,
            port: process.env.DB_PORT,
            user: 'root',
            password: '',
            multipleStatements: true
        });
        console.log('‚úÖ Connected as root\n');
        
        // Create production database if it doesn't exist
        const dbName = process.env.DB_NAME;
        console.log(`üóÑÔ∏è  Setting up database: ${dbName}`);\n        
        await connection.query(`CREATE DATABASE IF NOT EXISTS \\`${dbName}\\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`);\n        console.log('‚úÖ Database created/verified');\n        \n        // Use the database\n        await connection.query(`USE \\`${dbName}\\``);\n        console.log('‚úÖ Connected to production database\\n');\n        \n        // Load schema file\n        console.log('üìÑ Loading database schema...');\n        const schemaPath = path.join(__dirname, '..', 'database', 'jobscooter_complete_schema.sql');\n        \n        if (!fs.existsSync(schemaPath)) {\n            throw new Error(`Schema file not found at: ${schemaPath}`);\n        }\n        \n        let schemaSQL = fs.readFileSync(schemaPath, 'utf8');\n        \n        // Clean up the schema - remove database creation and use statements\n        schemaSQL = schemaSQL.replace(/CREATE DATABASE[^;]+;/gi, '');\n        schemaSQL = schemaSQL.replace(/USE[^;]+;/gi, '');\n        schemaSQL = schemaSQL.replace(/SET SQL_MODE[^;]+;/gi, '');\n        schemaSQL = schemaSQL.replace(/SET AUTOCOMMIT[^;]+;/gi, '');\n        schemaSQL = schemaSQL.replace(/START TRANSACTION[^;]*;/gi, '');\n        schemaSQL = schemaSQL.replace(/SET time_zone[^;]+;/gi, '');\n        \n        console.log(`‚úÖ Schema loaded (${Math.round(schemaSQL.length / 1024)}KB)\\n`);\n        \n        // Execute schema in manageable chunks\n        console.log('‚ö° Creating database structure...');\n        \n        // Split into logical sections and execute\n        const sections = [\n            { name: 'Core Tables', pattern: /CREATE TABLE.*?ENGINE=InnoDB[^;]*;/gs },\n            { name: 'Views', pattern: /CREATE VIEW.*?GROUP BY[^;]*;/gs },\n            { name: 'Sample Data', pattern: /INSERT INTO.*?;/gs },\n            { name: 'Indexes', pattern: /CREATE INDEX.*?;/gs },\n            { name: 'Procedures', pattern: /CREATE PROCEDURE.*?END\\$\\$/gs },\n            { name: 'Triggers', pattern: /CREATE TRIGGER.*?END\\$\\$/gs }\n        ];\n        \n        let totalSuccess = 0;\n        let totalSkipped = 0;\n        \n        for (const section of sections) {\n            const matches = schemaSQL.match(section.pattern) || [];\n            if (matches.length === 0) continue;\n            \n            console.log(`\\nüìã Processing ${section.name} (${matches.length} items)`);\n            \n            for (let i = 0; i < matches.length; i++) {\n                const statement = matches[i].trim();\n                if (!statement) continue;\n                \n                try {\n                    console.log(`   [${i + 1}/${matches.length}] ${getStatementDescription(statement)}`);\n                    \n                    await connection.query(statement);\n                    totalSuccess++;\n                    \n                } catch (error) {\n                    if (error.code === 'ER_TABLE_EXISTS_ERROR' || \n                        error.code === 'ER_DUP_KEYNAME' ||\n                        error.message.includes('already exists')) {\n                        console.log(`   ‚ö†Ô∏è  Already exists (skipping)`);\n                        totalSkipped++;\n                    } else {\n                        console.error(`   ‚ùå Error: ${error.message}`);\n                        totalSkipped++;\n                    }\n                }\n            }\n        }\n        \n        // Handle remaining statements (simple approach)\n        console.log('\\nüìã Processing remaining statements...');\n        const remainingStatements = schemaSQL\n            .split(';')\n            .map(s => s.trim())\n            .filter(s => s && \n                !s.startsWith('--') && \n                s.toUpperCase().includes('INSERT INTO') &&\n                !s.match(/CREATE TABLE|CREATE VIEW|CREATE INDEX|CREATE PROCEDURE|CREATE TRIGGER/i)\n            );\n        \n        for (const statement of remainingStatements) {\n            try {\n                await connection.query(statement + ';');\n                totalSuccess++;\n            } catch (error) {\n                if (!error.code || error.code === 'ER_DUP_ENTRY') {\n                    totalSkipped++;\n                } else {\n                    console.log(`   ‚ö†Ô∏è  Skipping: ${error.message}`);\n                    totalSkipped++;\n                }\n            }\n        }\n        \n        console.log(`\\nüéâ Database setup completed!`);\n        console.log(`   ‚úÖ ${totalSuccess} items created successfully`);\n        console.log(`   ‚ö†Ô∏è  ${totalSkipped} items skipped\\n`);\n        \n        // Verify the setup\n        console.log('üîç Verifying production database...');\n        \n        const [tables] = await connection.query('SHOW TABLES');\n        console.log(`\\n‚úÖ Database contains ${tables.length} tables:`);\n        \n        const tableNames = tables.map(table => Object.values(table)[0]).sort();\n        tableNames.forEach((tableName, index) => {\n            console.log(`   ${(index + 1).toString().padStart(2, ' ')}. ${tableName}`);\n        });\n        \n        // Check sample data\n        try {\n            const checks = [\n                { table: 'accredited_institutions', desc: 'accredited institutions' },\n                { table: 'system_settings', desc: 'system settings' },\n                { table: 'subscribers', desc: 'sample subscribers' }\n            ];\n            \n            console.log('\\nüìä Sample data verification:');\n            for (const check of checks) {\n                try {\n                    const [result] = await connection.query(`SELECT COUNT(*) as count FROM ${check.table}`);\n                    console.log(`   ‚Ä¢ ${result[0].count} ${check.desc}`);\n                } catch (err) {\n                    console.log(`   ‚ö†Ô∏è  ${check.table}: ${err.message}`);\n                }\n            }\n        } catch (error) {\n            console.log('   ‚ö†Ô∏è  Sample data check failed');\n        }\n        \n        console.log('\\nüéä Production database is ready!');\n        console.log('\\nüîê Database Information:');\n        console.log(`   Host: ${process.env.DB_HOST}`);\n        console.log(`   Database: ${process.env.DB_NAME}`);\n        console.log(`   Tables: ${tables.length}`);\n        \n        console.log('\\n‚ö†Ô∏è  Note: Update your .env DB_USER and DB_PASSWORD for production use');\n        console.log('   Current setup uses root user for development');\n        \n        console.log('\\nüöÄ JobScooter is ready for production!');\n        \n    } catch (error) {\n        console.error('\\n‚ùå Database setup failed:');\n        console.error(`   Error: ${error.message}`);\n        console.error(`   Code: ${error.code || 'UNKNOWN'}`);\n        \n        process.exit(1);\n        \n    } finally {\n        if (connection) {\n            await connection.end();\n            console.log('\\nüîå Database connection closed');\n        }\n    }\n}\n\nfunction getStatementDescription(statement) {\n    const stmt = statement.trim().toLowerCase();\n    \n    if (stmt.includes('create table `applicants`')) return 'Applicants table';\n    if (stmt.includes('create table `certificates`')) return 'Certificates table';\n    if (stmt.includes('create table `generated_cvs`')) return 'Generated CVs table';\n    if (stmt.includes('create table `traffic_light_scores`')) return 'Traffic light scores table';\n    if (stmt.includes('create table `activity_logs`')) return 'Activity logs table';\n    if (stmt.includes('create table `language_verifications`')) return 'Language verifications table';\n    if (stmt.includes('create table `public_profiles`')) return 'Public profiles table';\n    if (stmt.includes('create table `application_sessions`')) return 'Application sessions table';\n    if (stmt.includes('create table')) {\n        const match = stmt.match(/create table `([^`]+)`/);\n        return match ? `${match[1]} table` : 'Table';\n    }\n    if (stmt.includes('create view')) return 'Database view';\n    if (stmt.includes('create procedure')) return 'Stored procedure';\n    if (stmt.includes('create trigger')) return 'Database trigger';\n    if (stmt.includes('create index')) return 'Database index';\n    if (stmt.includes('insert into')) {\n        const match = stmt.match(/insert into `([^`]+)`/);\n        return match ? `${match[1]} sample data` : 'Sample data';\n    }\n    \n    return 'Database object';\n}\n\n// Run the setup\nif (require.main === module) {\n    setupDatabaseSimple().catch(console.error);\n}\n\nmodule.exports = { setupDatabaseSimple };